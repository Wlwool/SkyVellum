import logging
from aiogram import Dispatcher, types
from aiogram import F
from aiogram.fsm.context import FSMContext
from datetime import datetime
from pytz import timezone
from sqlalchemy.future import select
from typing import Any
from bot.database.models import User, WeatherData
from bot.database.database import async_session
from bot.services.weather_api import WeatherAPI
from bot.services.analytics import WeatherAnalytics
from bot.keyboards.reply import get_weather_keyboard, get_start_keyboard


logger = logging.getLogger(__name__)
weather_api = WeatherAPI()


async def get_weather_now(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
    utc_time = message.date.astimezone(timezone('Europe/Moscow'))
    formatted_time = utc_time.strftime('%H:%M:%S')

    user_id = message.from_user.id

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async with async_session() as session:
        stmt = select(User).where(User.user_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

    if not user:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
                             reply_markup=get_start_keyboard(is_registered=False)
                             )
        return

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    # weather_data = await weather_api.get_current_weather(user.city)
    weather_data: dict[str, Any] | None = await weather_api.get_current_weather(user.city)

    if not weather_data:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                             reply_markup=get_weather_keyboard()
                             )
        return

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        new_weather_data = WeatherData(
            user_id=user.id,
            temperature=weather_data["temperature"],
            feels_like=weather_data["feels_like"],
            pressure=weather_data["pressure"],
            humidity=weather_data["humidity"],
            wind_speed=weather_data["wind_speed"],
            description=weather_data["description"]
        )
        session.add(new_weather_data)
        await session.commit()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞—Ç–∞ –∏ —Ä–∞—Å—Å–≤–µ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    sunrise_time = datetime.fromtimestamp(weather_data["sunrise"]).strftime('%H:%M:%S')
    sunset_time = datetime.fromtimestamp(weather_data["sunset"]).strftime('%H:%M:%S')

    # –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    weather_message = (
        f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {weather_data['city']} ({weather_data['country']}):\n\n"
        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather_data['feels_like']:.1f}¬∞C)\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
        f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å\n"
        f"üîç {weather_data['description'].capitalize()}\n\n"
        f"üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_time}\n"
        f"üåá –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_time}\n\n"
        f"üïí –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {formatted_time}\n"  # message.date.strftime('%H:%M:%S')
        f"*** –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ***"
    )   # –û–±–ª–∞—á–Ω–æ—Å—Ç—å: 100% –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: 08:27:39

    await message.answer(weather_message, reply_markup=get_weather_keyboard())

async def get_weather_forecast(message: types.Message) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π"""
    try:
        user_id = message.from_user.id

        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        async with async_session() as session:
            stmt = select(User).where(User.user_id == user_id)
            result = await session.execute(stmt)
            user = result.scalar_one_or_none()

        if not user:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
                                 reply_markup=get_start_keyboard(is_registered=False)
                                 )
            return
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        forecast_data = await weather_api.get_forecast(user.city, days=5)
        logger.info(f"Forecast data:{forecast_data}")
        print(f"Forecast data - {forecast_data} -")

        if not forecast_data:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                                 reply_markup=get_weather_keyboard()
                                 )
            return

        # –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        forecast_message = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {forecast_data['city']} ({forecast_data['country']}):\n\n"

        for forecast in forecast_data["forecasts"][:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π
            date_str = forecast["date"].strftime("%d.%m")
            forecast_message += (
                f"üìÖ {date_str}:\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['avg_temp']:.1f}¬∞C (–æ—Ç {forecast['min_temp']:.1f}¬∞C –¥–æ {forecast['max_temp']:.1f}¬∞C)\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast['avg_humidity']:.0f}%\n"
                f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {forecast['avg_wind']:.1f} –º/—Å\n"
                f"üîç {forecast['description'].capitalize()}\n\n"
            )
        await message.answer(forecast_message, reply_markup=get_weather_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")

async def get_weekly_analysis(message: types.Message) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async with async_session() as session:
        stmt = select(User).where(User.user_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

    if not user:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
                             reply_markup=get_start_keyboard(is_registered=False)
                             )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã
    analysis_data = await WeatherAnalytics().get_weekly_analysis(user.id)

    if not analysis_data:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_weather_keyboard()
        )
        return

    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–≥–æ–¥—ã
    start_date = analysis_data["period"]["start"].strftime("%d.%m")
    end_date = analysis_data["period"]["end"].strftime("%d.%m")

    analysis_message = f"–ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {analysis_data['city']}:\n\n"

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤–µ—Ç—Ä–∞
    if analysis_data["trends"]:
        analysis_message += "üìä –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
        analysis_message += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {analysis_data['trends']['temperature']['description']} "
        analysis_message += f"({analysis_data['trends']['temperature']['value']:.1f}¬∞C)\n"
        analysis_message += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {analysis_data['trends']['humidity']['description']} "
        analysis_message += f"({analysis_data['trends']['humidity']['value']:.1f}%)\n"
        analysis_message += f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {analysis_data['trends']['wind']['description']} "
        analysis_message += f"({analysis_data['trends']['wind']['value']:.1f} –º/—Å)\n\n"

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–Ω—è–º –∑–∞ –Ω–µ–¥–µ–ª—é
    analysis_message += "üìÖ –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º:\n"
    for day_data in analysis_data["daily_analysis"]:
        date_str = day_data["date"].strftime("%d.%m")
        analysis_message += (
            f"- {date_str}: {day_data['avg_temp']:.1f}¬∞C, "
            f"–≤–ª–∞–∂–Ω–æ—Å—Ç—å {day_data['avg_humidity']:.0f}%, "
            f"–≤–µ—Ç–µ—Ä {day_data['avg_wind']:.1f} –º/—Å\n"
        )

    await message.answer(analysis_message, reply_markup=get_weather_keyboard())

async def change_city(message: types.Message, state: FSMContext):
    """–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞"""
    from bot.handlers.registration import register_command
    await register_command(message, state)
    # await register_command(message, FSMContext(message.bot.state_storage, message.chat.id, message.from_user.id))

def register_weather_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
    dp.message.register(get_weather_now, F.text == "–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
    dp.message.register(get_weather_forecast, F.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π")
    dp.message.register(get_weekly_analysis, F.text == "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    dp.message.register(change_city, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
