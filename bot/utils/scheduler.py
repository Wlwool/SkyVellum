import logging
import asyncio
from sqlalchemy.future import select
from aiogram import Bot
from typing import Any
from datetime import datetime, time, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from bot.database.models import User
from bot.database.database import async_session
from bot.services.weather_api import WeatherAPI
from bot.services.analytics import WeatherAnalytics


logger = logging.getLogger(__name__)
weather_api = WeatherAPI()


async def send_daily_weather(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")

    async with async_session() as session:
        stmt = select(User).where(User.is_active == True)  # type: ignore
        result = await session.execute(stmt)
        users = result.scalars().all()

    for user in users:
        try:
            # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            weather_data: dict[str, Any] | None = await weather_api.get_current_weather(user.city)

            if not weather_data:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}, –≥–æ—Ä–æ–¥: {user.city}")
                continue

            # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã
            message = (
                f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {weather_data['city']}:\n\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather_data['feels_like']:.1f}¬∞C)\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
                f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å\n"
                f"üîç {weather_data['description'].capitalize()}\n\n"
                f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä"
            )
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user.user_id, message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")

            # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
            await asyncio.sleep(0.5)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

async def send_weekly_analysis(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã")

    async with async_session() as session:
        stmt = select(User).where(User.is_active.is_(True))
        result = await session.execute(stmt)
        users = result.scalars().all()

    for user in users:
        try:
            # –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            analysis_data = await WeatherAnalytics.get_weekly_analysis(user.id)

            if not analysis_data:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}")
                continue

            # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ–≥–æ–¥—ã
            start_date = analysis_data["period"]["start"].strftime("%d.%m")
            end_date = analysis_data["period"]["end"].strftime("%d.%m")

            message = f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {analysis_data['city']}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö
            if analysis_data["trends"]:
                message += "–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
                message += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {analysis_data['trends']['temperature']['description']} "
                message += f"({analysis_data['trends']['temperature']['value']:.1f}¬∞C)\n"
                message += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {analysis_data['trends']['humidity']['description']} "
                message += f"({analysis_data['trends']['humidity']['value']:.1f}%)\n"
                message += f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {analysis_data['trends']['wind']['description']} "
                message += f"({analysis_data['trends']['wind']['value']:.1f} –º/—Å)\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            if analysis_data["next_week_forecast"]:
                message += "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é (–µ—Å–ª–∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è):\n"
                message += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {analysis_data['next_week_forecast']['temperature']:.1f}¬∞C\n"
                message += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {analysis_data['next_week_forecast']['humidity']:.1f}%\n"
                message += f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {analysis_data['next_week_forecast']['wind']:.1f} –º/—Å\n\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user.user_id, message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await asyncio.sleep(0.5)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")


def schedule_jobs(scheduler: AsyncIOScheduler, bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π.
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ 8 —É—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
    """
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ 8 —É—Ç—Ä–∞
    scheduler.add_job(
        send_daily_weather,
        trigger=CronTrigger(hour=8, minute=0),
        kwargs={"bot": bot},
        id="daily_weather",
        replace_existing=True
        )
    logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ 8:00")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
    scheduler.add_job(
        send_weekly_analysis,
        trigger=CronTrigger(day_of_week="sun", hour=12, minute=0),
        kwargs={"bot": bot},
        id="weekly_analysis",
        replace_existing=True
    )

    logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã –≤ 12:00 –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
